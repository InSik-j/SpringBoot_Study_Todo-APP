------------------------------------------------
 npm 명령어
    npm start : 개발자 모드에서 app 실행
    npm test : 유닛 테스트에 사용
    npm run build: 배포 가능한 유닛 프로덕션 생성. 패키지를 생성 후 프로덕션으로 배포
    npm install : 특정 종속성 설치 

------------------------------------------------

React App의 폴더 구조
    package.json : 종속성을 정의하는 파일. maven의 pom.xml과 유사
    node_modules : 모든 종속성이 다운로드 되는 폴더
    리액트 초기화 
    - public/index.html : 브라우저에서 가장 먼저 로드되는 파일로 root div가 존재함.
    - src/index.js : React App을 초기화하고 App Component 로드. App Component로 root div를 채움

    - src/App.js : App Component를 위한 코드, 페이지에 로드되는 실제 내용이 들어 있는 파일
------------------------------------------------

Component
 1. View (JSX, javaScript)
 2. Logic(javaScript) : Logic 정의
 3. Styling( CSS ) : 스타일 정의
 4. State( Internal Data Store ) : 특정 Component에 대한 데이터나 정보. Component의 내부 데이터 저장소와 같음
 5. Props( Pass Data) : Component 사이에 데이터 전달
 * Component의 이름은 항상 대문자 시작

함수 Component
 - 함수 Component에는 State가 존재하지 않음
 - Hooks를 통해 함수 Component에도 State 추가 가능
   -> useState 반환값
       1. 현재 State 값
       2. State를 업데이트하는 함수 
 function Component명(){
    return(

    )
 }
클래스 Component
 class Component명 extends Comment{
    반환할 메소드명(){
        return(
            
        )
    }
 }

------------------------------------------------

 JSX (javaScript XML)
  - 닫는 태그가 필수
  - 최상위 태그는 하나만 가능
    -> 여러 개의 최상위 JSX태그는 반환 X
    -> 공유 부모로 묶어줘야 함

------------------------------------------------

 코드를 잘 정리하는 방법
  1. 각 Component를 각 파일 및 모듈에 넣기

------------------------------------------------
 
 CSS 정의
  1. style 속성을 이용하여 style을 요소 자체의 속성으로 포함
  2. className을 사용하여 style 정의

------------------------------------------------
 
 React에서 form 요소를 사용할 때
 특정 요소 값을 저장하는 State와 DOM 값이 동기화되어야 함
  1. React State
    - form에 사용되는 변수 값 유지
  2. form 요소 자체의 값
    - DOM에 값이 저장됨
 
 React Router DOM : 특정 Component로 라우팅을 가능하게 해줌
  React Router DOM 사용하기
    1. 프로젝트에 React Router DOM 추가
       - npm install react-router-dom
         * 의존성을 추가할 때마다 app 재실행
    2. BrowserRouter, Routes, Route, useNavigate import하기
       - import {BrowserRouter, Routes, Route, useNavigate} from 'react-router-dom'
       
       
    3. 라우팅 추가
       3-1 BrowserRouter 내부에 BrowserRouter의 일부로 Routes 구성
       3-2 Route의 경로와 요소 구성 
           * Route : 특정 Routes를 구성하는 곳
       ex) <BrowserRouter>
                <Routes>
                    <Route path='/login' element={<LoginComponent/>}></Route>
                    <Route path='/welcome' element={<WelcomeComponent/>}></Route>
                </Routes>
            </BrowserRouter>
    4. useNavigate로 라우팅하기
       * useNavigate : 다른 페이지 탐색이 가능하고, 위치를 변경하는 명령 method를 반환
       4-1 useNavigate 객체 생성
          ex) const navigate = useNavigate();
       4-2 라우팅할 곳에 경로 설정
          ex) navigate('/welcome')     